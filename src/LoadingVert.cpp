/**
 * This file was generated by bin2cpp v3.0.0
 * Copyright (C) 2013-2023 end2endzone.com. All rights reserved.
 * bin2cpp is open source software, see http://github.com/end2endzone/bin2cpp
 * Source code for file 'leaf.vert.spv', last modified 1744388595.
 * Do not modify this file.
 */
#if defined(_WIN32) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif
#include "LoadingVert.h"
#include <string> //for std::string
#include <iostream>
#include <fstream>  //for ofstream
namespace bin2cpp
{
  class LoadingVertFile : public virtual bin2cpp::File
  {
  public:
    LoadingVertFile() { build(); }
    virtual ~LoadingVertFile() {}
    virtual size_t getSize() const { return 2744; }
    virtual const char * getFileName() const { return "leaf.vert.spv"; }
    virtual const char * getFilePath() const { return getFileName(); }
    virtual const char * getBuffer() const { return mBuffer.c_str(); }
    void build()
    {
      mBuffer.clear();
      mBuffer.reserve(getSize()); //allocate all required memory at once to prevent reallocations
      mBuffer.append("\003\002#\a\0\0\001\0\v\0\r\0D\0\0\0\0\0\0\0\021\0\002\0\001\0\0\0\v\0\006\0\001\0\0\0GLSL.std.450\0\0\0\0\016\0\003\0\0\0\0\0\001\0\0\0\017\0\r\0\0\0\0\0\004\0\0\0main\0\0\0\0\024\0\0\0\033\0\0\0\'\0\0\0002\0\0\0005\0\0\0006\0\0\0:\0\0\0<\0\0\0\003\0\003\0\002\0\0\0\302\001\0\0\004\0\n\0GL_GOOGLE_cpp_style_line_directive\0\0\004\0\b\0GL_GOOGLE_include_directive\0", 200);
      mBuffer.append("\005\0\004\0\004\0\0\0main\0\0\0\0\005\0\006\0\t\0\0\0positionWorld\0\0\0\005\0\006\0\016\0\0\0leafTransforms\0\0\006\0\a\0\016\0\0\0\0\0\0\0leafMatrices\0\0\0\0\005\0\003\0\020\0\0\0\0\0\0\0\005\0\a\0\024\0\0\0gl_InstanceIndex\0\0\0\0\005\0\005\0\033\0\0\0position\0\0\0\0\005\0\006\0%\0\0\0gl_PerVertex\0\0\0\0\006\0\006\0%\0\0\0\0\0\0\0gl_Position\0", 200);
      mBuffer.append("\006\0\a\0%\0\0\0\001\0\0\0gl_PointSize\0\0\0\0\006\0\a\0%\0\0\0\002\0\0\0gl_ClipDistance\0\006\0\a\0%\0\0\0\003\0\0\0gl_CullDistance\0\005\0\003\0\'\0\0\0\0\0\0\0\005\0\005\0(\0\0\0GlobalUbo\0\0\0\006\0\006\0(\0\0\0\0\0\0\0projView\0\0\0\0\006\0\006\0(\0\0\0\001\0\0\0cameraPos\0\0\0\005\0\003\0*\0\0\0ubo\0\005\0\006\0002\0\0\0fragPosWorld\0\0\0\0", 200);
      mBuffer.append("\005\0\006\0005\0\0\0fragNormalWorld\0\005\0\004\0006\0\0\0normal\0\0\005\0\006\0:\0\0\0fragTexCoord\0\0\0\0\005\0\003\0<\0\0\0uv\0\0\005\0\005\0>\0\0\0PointLight\0\0\006\0\006\0>\0\0\0\0\0\0\0position\0\0\0\0\006\0\005\0>\0\0\0\001\0\0\0color\0\0\0\005\0\006\0A\0\0\0GPUSceneData\0\0\0\0\006\0\a\0A\0\0\0\0\0\0\0ambientColor\0\0\0\0\006\0\b\0A\0\0\0", 200);
      mBuffer.append("\001\0\0\0sunlightDirection\0\0\0\006\0\a\0A\0\0\0\002\0\0\0sunlightColor\0\0\0\006\0\006\0A\0\0\0\003\0\0\0pointLights\0\006\0\006\0A\0\0\0\004\0\0\0numLights\0\0\0\005\0\005\0C\0\0\0gpuScene\0\0\0\0G\0\004\0\r\0\0\0\006\0\0\0@\0\0\0H\0\004\0\016\0\0\0\0\0\0\0\005\0\0\0H\0\005\0\016\0\0\0\0\0\0\0#\0\0\0\0\0\0\0H\0\005\0\016\0\0\0\0\0\0\0\a\0\0\0\020\0\0\0G\0\003\0\016\0\0\0", 200);
      mBuffer.append("\002\0\0\0G\0\004\0\020\0\0\0\"\0\0\0\0\0\0\0G\0\004\0\020\0\0\0!\0\0\0\003\0\0\0G\0\004\0\024\0\0\0\v\0\0\0+\0\0\0G\0\004\0\033\0\0\0\036\0\0\0\0\0\0\0H\0\005\0%\0\0\0\0\0\0\0\v\0\0\0\0\0\0\0H\0\005\0%\0\0\0\001\0\0\0\v\0\0\0\001\0\0\0H\0\005\0%\0\0\0\002\0\0\0\v\0\0\0\003\0\0\0H\0\005\0%\0\0\0\003\0\0\0\v\0\0\0\004\0\0\0G\0\003\0%\0\0\0\002\0\0\0H\0\004\0(\0\0\0\0\0\0\0\005\0\0\0H\0\005\0(\0\0\0\0\0\0\0#\0\0\0\0\0\0\0H\0\005\0", 200);
      mBuffer.append("(\0\0\0\0\0\0\0\a\0\0\0\020\0\0\0H\0\005\0(\0\0\0\001\0\0\0#\0\0\0@\0\0\0G\0\003\0(\0\0\0\002\0\0\0G\0\004\0*\0\0\0\"\0\0\0\0\0\0\0G\0\004\0*\0\0\0!\0\0\0\0\0\0\0G\0\004\0002\0\0\0\036\0\0\0\0\0\0\0G\0\004\0005\0\0\0\036\0\0\0\001\0\0\0G\0\004\0006\0\0\0\036\0\0\0\001\0\0\0G\0\004\0:\0\0\0\036\0\0\0\002\0\0\0G\0\004\0<\0\0\0\036\0\0\0\002\0\0\0H\0\005\0>\0\0\0\0\0\0\0#\0\0\0\0\0\0\0H\0\005\0>\0\0\0\001\0\0\0#\0\0\0\020\0\0\0", 200);
      mBuffer.append("G\0\004\0@\0\0\0\006\0\0\0 \0\0\0H\0\005\0A\0\0\0\0\0\0\0#\0\0\0\0\0\0\0H\0\005\0A\0\0\0\001\0\0\0#\0\0\0\020\0\0\0H\0\005\0A\0\0\0\002\0\0\0#\0\0\0 \0\0\0H\0\005\0A\0\0\0\003\0\0\0#\0\0\0000\0\0\0H\0\005\0A\0\0\0\004\0\0\0#\0\0\0p\001\0\0G\0\003\0A\0\0\0\002\0\0\0G\0\004\0C\0\0\0\"\0\0\0\0\0\0\0G\0\004\0C\0\0\0!\0\0\0\001\0\0\0\023\0\002\0\002\0\0\0!\0\003\0\003\0\0\0\002\0\0\0\026\0\003\0\006\0\0\0 \0\0\0\027\0\004\0\a\0\0\0", 200);
      mBuffer.append("\006\0\0\0\004\0\0\0 \0\004\0\b\0\0\0\a\0\0\0\a\0\0\0\030\0\004\0\n\0\0\0\a\0\0\0\004\0\0\0\025\0\004\0\v\0\0\0 \0\0\0\0\0\0\0+\0\004\0\v\0\0\0\f\0\0\0\0\004\0\0\034\0\004\0\r\0\0\0\n\0\0\0\f\0\0\0\036\0\003\0\016\0\0\0\r\0\0\0 \0\004\0\017\0\0\0\002\0\0\0\016\0\0\0;\0\004\0\017\0\0\0\020\0\0\0\002\0\0\0\025\0\004\0\021\0\0\0 \0\0\0\001\0\0\0+\0\004\0\021\0\0\0\022\0\0\0\0\0\0\0 \0\004\0\023\0\0\0\001\0\0\0\021\0\0\0;\0\004\0\023\0\0\0\024\0\0\0\001\0\0\0 \0\004\0", 200);
      mBuffer.append("\026\0\0\0\002\0\0\0\n\0\0\0\027\0\004\0\031\0\0\0\006\0\0\0\003\0\0\0 \0\004\0\032\0\0\0\001\0\0\0\031\0\0\0;\0\004\0\032\0\0\0\033\0\0\0\001\0\0\0+\0\004\0\006\0\0\0\035\0\0\0\0\0\200\?+\0\004\0\v\0\0\0#\0\0\0\001\0\0\0\034\0\004\0$\0\0\0\006\0\0\0#\0\0\0\036\0\006\0%\0\0\0\a\0\0\0\006\0\0\0$\0\0\0$\0\0\0 \0\004\0&\0\0\0\003\0\0\0%\0\0\0;\0\004\0&\0\0\0\'\0\0\0\003\0\0\0\036\0\004\0(\0\0\0\n\0\0\0\a\0\0\0 \0\004\0)\0\0\0\002\0\0\0(\0\0\0;\0\004\0", 200);
      mBuffer.append(")\0\0\0*\0\0\0\002\0\0\0 \0\004\0/\0\0\0\003\0\0\0\a\0\0\0 \0\004\0001\0\0\0\003\0\0\0\031\0\0\0;\0\004\0001\0\0\0002\0\0\0\003\0\0\0;\0\004\0001\0\0\0005\0\0\0\003\0\0\0;\0\004\0\032\0\0\0006\0\0\0\001\0\0\0\027\0\004\0008\0\0\0\006\0\0\0\002\0\0\0 \0\004\0009\0\0\0\003\0\0\0008\0\0\0;\0\004\0009\0\0\0:\0\0\0\003\0\0\0 \0\004\0;\0\0\0\001\0\0\0008\0\0\0;\0\004\0;\0\0\0<\0\0\0\001\0\0\0\036\0\004\0>\0\0\0\a\0\0\0\a\0\0\0+\0\004\0\v\0\0\0\?\0\0\0", 200);
      mBuffer.append("\n\0\0\0\034\0\004\0@\0\0\0>\0\0\0\?\0\0\0\036\0\a\0A\0\0\0\a\0\0\0\a\0\0\0\a\0\0\0@\0\0\0\021\0\0\0 \0\004\0B\0\0\0\002\0\0\0A\0\0\0;\0\004\0B\0\0\0C\0\0\0\002\0\0\0006\0\005\0\002\0\0\0\004\0\0\0\0\0\0\0\003\0\0\0\370\0\002\0\005\0\0\0;\0\004\0\b\0\0\0\t\0\0\0\a\0\0\0=\0\004\0\021\0\0\0\025\0\0\0\024\0\0\0A\0\006\0\026\0\0\0\027\0\0\0\020\0\0\0\022\0\0\0\025\0\0\0=\0\004\0\n\0\0\0\030\0\0\0\027\0\0\0=\0\004\0\031\0\0\0\034\0\0\0\033\0\0\0Q\0\005\0", 200);
      mBuffer.append("\006\0\0\0\036\0\0\0\034\0\0\0\0\0\0\0Q\0\005\0\006\0\0\0\037\0\0\0\034\0\0\0\001\0\0\0Q\0\005\0\006\0\0\0 \0\0\0\034\0\0\0\002\0\0\0P\0\a\0\a\0\0\0!\0\0\0\036\0\0\0\037\0\0\0 \0\0\0\035\0\0\0\221\0\005\0\a\0\0\0\"\0\0\0\030\0\0\0!\0\0\0>\0\003\0\t\0\0\0\"\0\0\0A\0\005\0\026\0\0\0+\0\0\0*\0\0\0\022\0\0\0=\0\004\0\n\0\0\0,\0\0\0+\0\0\0=\0\004\0\a\0\0\0-\0\0\0\t\0\0\0\221\0\005\0\a\0\0\0.\0\0\0,\0\0\0-\0\0\0A\0\005\0/\0\0\0000\0\0\0", 200);
      mBuffer.append("\'\0\0\0\022\0\0\0>\0\003\0000\0\0\0.\0\0\0=\0\004\0\a\0\0\0003\0\0\0\t\0\0\0O\0\b\0\031\0\0\0004\0\0\0003\0\0\0003\0\0\0\0\0\0\0\001\0\0\0\002\0\0\0>\0\003\0002\0\0\0004\0\0\0=\0\004\0\031\0\0\0007\0\0\0006\0\0\0>\0\003\0005\0\0\0007\0\0\0=\0\004\0008\0\0\0=\0\0\0<\0\0\0>\0\003\0:\0\0\0=\0\0\0\375\0\001\0008\0\001\0", 144);
    }
    virtual bool save(const char * filename) const
    {
      std::ofstream f(filename, std::ios::out | std::ios::binary | std::ios::trunc);
      if (f.fail()) return false;
      size_t fileSize = getSize();
      const char * buffer = getBuffer();
      f.write(buffer, fileSize);
      f.close();
      return true;
    }
  private:
    std::string mBuffer;
  };
  const File & getLoadingVertFile() { static LoadingVertFile _instance; return _instance; }
}; //bin2cpp
